// Code generated by MockGen. DO NOT EDIT.
// Source: user_list.go

// Package handler is a generated GoMock package.
package handler

import (
	models "SuperListsAPI/cmd/userLists/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserListService is a mock of IUserListService interface.
type MockIUserListService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserListServiceMockRecorder
}

// MockIUserListServiceMockRecorder is the mock recorder for MockIUserListService.
type MockIUserListServiceMockRecorder struct {
	mock *MockIUserListService
}

// NewMockIUserListService creates a new mock instance.
func NewMockIUserListService(ctrl *gomock.Controller) *MockIUserListService {
	mock := &MockIUserListService{ctrl: ctrl}
	mock.recorder = &MockIUserListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserListService) EXPECT() *MockIUserListServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserListService) Create(list models.UserList) (*models.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", list)
	ret0, _ := ret[0].(*models.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserListServiceMockRecorder) Create(list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserListService)(nil).Create), list)
}

// Delete mocks base method.
func (m *MockIUserListService) Delete(userListID string) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userListID)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserListServiceMockRecorder) Delete(userListID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserListService)(nil).Delete), userListID)
}

// Get mocks base method.
func (m *MockIUserListService) Get(userListID string) (*models.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userListID)
	ret0, _ := ret[0].(*models.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUserListServiceMockRecorder) Get(userListID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUserListService)(nil).Get), userListID)
}

// GetUserListsByListID mocks base method.
func (m *MockIUserListService) GetUserListsByListID(listID string) (*[]models.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListsByListID", listID)
	ret0, _ := ret[0].(*[]models.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListsByListID indicates an expected call of GetUserListsByListID.
func (mr *MockIUserListServiceMockRecorder) GetUserListsByListID(listID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListsByListID", reflect.TypeOf((*MockIUserListService)(nil).GetUserListsByListID), listID)
}

// GetUserListsByUserID mocks base method.
func (m *MockIUserListService) GetUserListsByUserID(userId string) (*[]models.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListsByUserID", userId)
	ret0, _ := ret[0].(*[]models.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListsByUserID indicates an expected call of GetUserListsByUserID.
func (mr *MockIUserListServiceMockRecorder) GetUserListsByUserID(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListsByUserID", reflect.TypeOf((*MockIUserListService)(nil).GetUserListsByUserID), userId)
}
