// Code generated by MockGen. DO NOT EDIT.
// Source: list_item.go

// Package handler is a generated GoMock package.
package handler

import (
	models "SuperListsAPI/cmd/listItems/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIListItemService is a mock of IListItemService interface.
type MockIListItemService struct {
	ctrl     *gomock.Controller
	recorder *MockIListItemServiceMockRecorder
}

// MockIListItemServiceMockRecorder is the mock recorder for MockIListItemService.
type MockIListItemServiceMockRecorder struct {
	mock *MockIListItemService
}

// NewMockIListItemService creates a new mock instance.
func NewMockIListItemService(ctrl *gomock.Controller) *MockIListItemService {
	mock := &MockIListItemService{ctrl: ctrl}
	mock.recorder = &MockIListItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIListItemService) EXPECT() *MockIListItemServiceMockRecorder {
	return m.recorder
}

// BulkDelete mocks base method.
func (m *MockIListItemService) BulkDelete(tasksToDelete []models.ListItem) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", tasksToDelete)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkDelete indicates an expected call of BulkDelete.
func (mr *MockIListItemServiceMockRecorder) BulkDelete(tasksToDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockIListItemService)(nil).BulkDelete), tasksToDelete)
}

// Create mocks base method.
func (m *MockIListItemService) Create(item models.ListItem) (*models.ListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(*models.ListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIListItemServiceMockRecorder) Create(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIListItemService)(nil).Create), item)
}

// Delete mocks base method.
func (m *MockIListItemService) Delete(listItemID string) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", listItemID)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIListItemServiceMockRecorder) Delete(listItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIListItemService)(nil).Delete), listItemID)
}

// DeleteListItemsByListID mocks base method.
func (m *MockIListItemService) DeleteListItemsByListID(listId string) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListItemsByListID", listId)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListItemsByListID indicates an expected call of DeleteListItemsByListID.
func (mr *MockIListItemServiceMockRecorder) DeleteListItemsByListID(listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListItemsByListID", reflect.TypeOf((*MockIListItemService)(nil).DeleteListItemsByListID), listId)
}

// Get mocks base method.
func (m *MockIListItemService) Get(listItemID string) (*models.ListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", listItemID)
	ret0, _ := ret[0].(*models.ListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIListItemServiceMockRecorder) Get(listItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIListItemService)(nil).Get), listItemID)
}

// GetItemsListByListID mocks base method.
func (m *MockIListItemService) GetItemsListByListID(listId string) (*[]models.ListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsListByListID", listId)
	ret0, _ := ret[0].(*[]models.ListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsListByListID indicates an expected call of GetItemsListByListID.
func (mr *MockIListItemServiceMockRecorder) GetItemsListByListID(listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsListByListID", reflect.TypeOf((*MockIListItemService)(nil).GetItemsListByListID), listId)
}

// MarkAsCompleted mocks base method.
func (m *MockIListItemService) MarkAsCompleted(tasksToDelete []models.ListItem) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsCompleted", tasksToDelete)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsCompleted indicates an expected call of MarkAsCompleted.
func (mr *MockIListItemServiceMockRecorder) MarkAsCompleted(tasksToDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsCompleted", reflect.TypeOf((*MockIListItemService)(nil).MarkAsCompleted), tasksToDelete)
}

// MarkAsPending mocks base method.
func (m *MockIListItemService) MarkAsPending(tasksToDelete []models.ListItem) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsPending", tasksToDelete)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsPending indicates an expected call of MarkAsPending.
func (mr *MockIListItemServiceMockRecorder) MarkAsPending(tasksToDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsPending", reflect.TypeOf((*MockIListItemService)(nil).MarkAsPending), tasksToDelete)
}

// Update mocks base method.
func (m *MockIListItemService) Update(item models.ListItem) (*models.ListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", item)
	ret0, _ := ret[0].(*models.ListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIListItemServiceMockRecorder) Update(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIListItemService)(nil).Update), item)
}
